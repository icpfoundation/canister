
type Authority = variant {
    ReadOnly:null;
    ReadAndWrite:null;
    Operational:null;
};

type Member = record {
    name:text;
    profile:Authority;
    identity:principal;
};

type Project = record {
    id: nat64;
    name: text;
    description: text;
    create_by: principal;
    create_time: nat64;
    git_repo_url: text;
    visibility: Authority;
    in_group: nat64;
    members:vec record { principal; Member; };
};

type Group = record {
    id: nat64;
    name: text;
    description: text;
    visibility: Authority;
    create_time: nat64;
    projects:vec record { nat64; Project; };
    members: vec record { principal; Member; };
};

type Result = variant{
    Ok:null;
    Err:text;
};

type CanisterStatus = variant{
    running:null;
    stopping:null;
    stopped:null;
};

type CanisterSettings = record {
    controllers: opt vec principal;
    compute_allocation: opt nat;
    memory_allocation: opt nat;
    freezing_threshold:  opt nat;
};


type CanisterStatusResponse  = record{
     status: CanisterStatus;
     settings: CanisterSettings;
     module_hash: opt vec nat8;
     memory_size: nat;
     cycles: nat;
};

type CanisterStatusRes = variant{
    Ok:CanisterStatusResponse;
    Err:text;
};

service :{
    get_group:(nat64) -> (opt Group) query;
    mock_test_add_group:() ->();
    mock_test_set_controllers:(principal) ->(Result);
    get_canister_status:(principal)->(CanisterStatusRes);
}